version: '3.8'

services:
  # PostgreSQL database for development
  postgres:
    image: postgres:15-alpine
    container_name: stackit_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: stackit_db
      POSTGRES_USER: stackit
      POSTGRES_PASSWORD: stackit
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stackit -d stackit_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stackit_network

  # PostgreSQL for testing (separate instance)
  postgres_test:
    image: postgres:15-alpine
    container_name: stackit_postgres_test
    restart: unless-stopped
    environment:
      POSTGRES_DB: stackit_test
      POSTGRES_USER: stackit
      POSTGRES_PASSWORD: stackit
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stackit -d stackit_test"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stackit_network
    profiles:
      - testing

  # Redis for caching (optional, for future use)
  redis:
    image: redis:7-alpine
    container_name: stackit_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stackit_network
    profiles:
      - caching

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: stackit_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@stackit.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - stackit_network
    profiles:
      - admin

volumes:
  postgres_data:
    driver: local
  postgres_test_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  stackit_network:
    driver: bridge
